// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Models;

namespace ServerApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210413053422_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ServerApp.Models.Api", b =>
                {
                    b.Property<long>("ApiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ApiId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectoryLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EnvironmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("FolderHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("TagLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApiId");

                    b.HasIndex("ApiId1");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("Apis");
                });

            modelBuilder.Entity("ServerApp.Models.AppArchitype", b =>
                {
                    b.Property<long>("AppArchitypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppArchitypeId");

                    b.ToTable("AppArchitypes");
                });

            modelBuilder.Entity("ServerApp.Models.ClientBrowser", b =>
                {
                    b.Property<long>("ClientBrowserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientBrowserId");

                    b.ToTable("ClientBrowsers");
                });

            modelBuilder.Entity("ServerApp.Models.ClientBrowserSupport", b =>
                {
                    b.Property<long>("ClientBrowserSupportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BrowserClientBrowserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("ClientBrowserSupportId");

                    b.HasIndex("BrowserClientBrowserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ClientBrowserSupport");
                });

            modelBuilder.Entity("ServerApp.Models.Comment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EnvironmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("Likes")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CommentId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ServerApp.Models.Company", b =>
                {
                    b.Property<long>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FinancialPocUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IndustryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ntn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OperationalPocUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProjectPocUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Still")
                        .HasColumnType("bit");

                    b.Property<string>("TagLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TechnicalPocUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.HasIndex("FinancialPocUserId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("OperationalPocUserId");

                    b.HasIndex("ProjectPocUserId");

                    b.HasIndex("TechnicalPocUserId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ServerApp.Models.CompanyFinancial", b =>
                {
                    b.Property<long>("CompanyFinancialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyFinancialId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Financials");
                });

            modelBuilder.Entity("ServerApp.Models.Corporation", b =>
                {
                    b.Property<long>("CorporationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CorporationId");

                    b.ToTable("Corporations");
                });

            modelBuilder.Entity("ServerApp.Models.DataLogFile", b =>
                {
                    b.Property<long>("DataLogFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DataLogFileId");

                    b.ToTable("DataLogFiles");
                });

            modelBuilder.Entity("ServerApp.Models.Database", b =>
                {
                    b.Property<long>("DatabaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ApiId")
                        .HasColumnType("bigint");

                    b.Property<string>("BackUpFileLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackUpFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BackupTakenPOCUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DatabaseVendorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EnvironmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastBackUpDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastRestoredDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LdfInformationDataLogFileId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<long?>("MdfInformationDataLogFileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("RestoredFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RestoredPOCUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServerId")
                        .HasColumnType("bigint");

                    b.HasKey("DatabaseId");

                    b.HasIndex("ApiId");

                    b.HasIndex("BackupTakenPOCUserId");

                    b.HasIndex("DatabaseVendorId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("LdfInformationDataLogFileId");

                    b.HasIndex("MdfInformationDataLogFileId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RestoredPOCUserId");

                    b.HasIndex("ServerId");

                    b.ToTable("Databases");
                });

            modelBuilder.Entity("ServerApp.Models.DatabaseServer", b =>
                {
                    b.Property<long>("DatabaseServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Port")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isRemote")
                        .HasColumnType("bit");

                    b.Property<bool>("onCloud")
                        .HasColumnType("bit");

                    b.HasKey("DatabaseServerId");

                    b.ToTable("DatabaseServer");
                });

            modelBuilder.Entity("ServerApp.Models.DatabaseVendor", b =>
                {
                    b.Property<long>("DatabaseVendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Build")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CorporationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Edition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Runtime")
                        .HasColumnType("bigint");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DatabaseVendorId");

                    b.HasIndex("CorporationId");

                    b.ToTable("DatabaseVendors");
                });

            modelBuilder.Entity("ServerApp.Models.Department", b =>
                {
                    b.Property<long>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ServerApp.Models.Environment", b =>
                {
                    b.Property<long>("EnvironmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationHyperLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dependency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DockerDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DockerImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Dockerized")
                        .HasColumnType("bit");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EnvironmentTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("HttpPort")
                        .HasColumnType("bigint");

                    b.Property<long>("HttpsPort")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastHealthCheckHealthCheckId")
                        .HasColumnType("bigint");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Updated")
                        .HasColumnType("bit");

                    b.Property<long?>("WebServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("WorkingDirectory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnvironmentId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnvironmentTypeId");

                    b.HasIndex("LastHealthCheckHealthCheckId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServerId");

                    b.HasIndex("WebServerId");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("ServerApp.Models.EnvironmentType", b =>
                {
                    b.Property<long>("EnvironmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnvironmentTypeId");

                    b.ToTable("EnvironmentTypes");
                });

            modelBuilder.Entity("ServerApp.Models.HealthCheck", b =>
                {
                    b.Property<long>("HealthCheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Directory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<string>("ReferenceLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HealthCheckId");

                    b.ToTable("HealthChecks");
                });

            modelBuilder.Entity("ServerApp.Models.HybridServer", b =>
                {
                    b.Property<long>("HybridServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatabaseServerBackUpFileLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatabaseServerBackUpFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DatabaseServerBackupTakenPOCUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("DatabaseServerComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatabaseServerInitialCatalog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatabaseServerInstance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatabaseServerIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatabaseServerLastBackUpDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatabaseServerLastRestoredDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DatabaseServerLdfInformationDataLogFileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DatabaseServerMdfInformationDataLogFileId")
                        .HasColumnType("bigint");

                    b.Property<string>("DatabaseServerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatabaseServerPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatabaseServerPort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatabaseServerRestoredFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DatabaseServerRestoredPOCUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("DatabaseServerUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailServerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailServerEmailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailServerIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailServerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailServerPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MailServerPort")
                        .HasColumnType("bigint");

                    b.Property<bool>("MailServerisSMTP")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebServerDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebServerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebServerVersion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HybridServerId");

                    b.HasIndex("DatabaseServerBackupTakenPOCUserId");

                    b.HasIndex("DatabaseServerLdfInformationDataLogFileId");

                    b.HasIndex("DatabaseServerMdfInformationDataLogFileId");

                    b.HasIndex("DatabaseServerRestoredPOCUserId");

                    b.ToTable("HybridServer");
                });

            modelBuilder.Entity("ServerApp.Models.Industry", b =>
                {
                    b.Property<long>("IndustryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IndustryId");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("ServerApp.Models.Language", b =>
                {
                    b.Property<long>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Example")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISO2")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("ISO3")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ServerApp.Models.MailServer", b =>
                {
                    b.Property<long>("MailServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Port")
                        .HasColumnType("bigint");

                    b.Property<bool>("isSMTP")
                        .HasColumnType("bit");

                    b.HasKey("MailServerId");

                    b.ToTable("MailServer");
                });

            modelBuilder.Entity("ServerApp.Models.OperatingSystem", b =>
                {
                    b.Property<long>("OperatingSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Build")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompatibilityMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OperatingSystemId");

                    b.ToTable("OperatingSystems");
                });

            modelBuilder.Entity("ServerApp.Models.OperatingSystemSupport", b =>
                {
                    b.Property<long>("OperatingSystemSupportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("OperatingSystemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductPrerequisiteId")
                        .HasColumnType("bigint");

                    b.HasKey("OperatingSystemSupportId");

                    b.HasIndex("OperatingSystemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductPrerequisiteId");

                    b.ToTable("OperatingSystemSupport");
                });

            modelBuilder.Entity("ServerApp.Models.ParentProduct", b =>
                {
                    b.Property<long>("ParentProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MainPocUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamQuantity")
                        .HasColumnType("int");

                    b.Property<string>("UserManualLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentProductId");

                    b.HasIndex("MainPocUserId");

                    b.ToTable("ParentProducts");
                });

            modelBuilder.Entity("ServerApp.Models.PasswordPolicy", b =>
                {
                    b.Property<long>("PasswordPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CapitalLetter")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Example")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<long>("SmallLetter")
                        .HasColumnType("bigint");

                    b.Property<long>("SpecialLetter")
                        .HasColumnType("bigint");

                    b.HasKey("PasswordPolicyId");

                    b.ToTable("PasswordPolicies");
                });

            modelBuilder.Entity("ServerApp.Models.PrintServer", b =>
                {
                    b.Property<long>("PrintServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Port")
                        .HasColumnType("bigint");

                    b.Property<bool>("isSMTP")
                        .HasColumnType("bit");

                    b.HasKey("PrintServerId");

                    b.ToTable("PrintServer");
                });

            modelBuilder.Entity("ServerApp.Models.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QualityAssuranceId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReleaseNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TypeProductTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Updated")
                        .HasColumnType("bit");

                    b.Property<string>("masterReleaseLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("masterReleaseWorkingDirecotory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("ParentProductId");

                    b.HasIndex("QualityAssuranceId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TypeProductTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ServerApp.Models.ProductPrerequisite", b =>
                {
                    b.Property<long>("ProductPrerequisiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dependency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("ProductPrerequisiteId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrerequisites");
                });

            modelBuilder.Entity("ServerApp.Models.ProductType", b =>
                {
                    b.Property<long>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductTypeId");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("ServerApp.Models.QualityAssurance", b =>
                {
                    b.Property<long>("QualityAssuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentationLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PerformedByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("VerifiedByUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("isPassed")
                        .HasColumnType("bit");

                    b.HasKey("QualityAssuranceId");

                    b.HasIndex("PerformedByUserId");

                    b.HasIndex("VerifiedByUserId");

                    b.ToTable("QualityAssurances");
                });

            modelBuilder.Entity("ServerApp.Models.Question", b =>
                {
                    b.Property<long>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ServerApp.Models.Rank", b =>
                {
                    b.Property<long>("RankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RankId");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("ServerApp.Models.Rating", b =>
                {
                    b.Property<long>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCompany")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProduct")
                        .HasColumnType("bit");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("RatingId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("ServerApp.Models.Region", b =>
                {
                    b.Property<long>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ISO2")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("ISO3")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("ServerApp.Models.Release", b =>
                {
                    b.Property<long>("ReleaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeployedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeployedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DevelopedByUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EnvironmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EnvironmentTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("PatchNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QualityAssuranceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReleaseId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DeployedByUserId");

                    b.HasIndex("DevelopedByUserId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("EnvironmentTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("QualityAssuranceId");

                    b.ToTable("Releases");
                });

            modelBuilder.Entity("ServerApp.Models.Server", b =>
                {
                    b.Property<long>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("DatabaseServerSupportDatabaseServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Dependency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HostMachine")
                        .HasColumnType("bit");

                    b.Property<long?>("HybridServerSupportHybridServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MailServerSupportMailServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Memory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OperatingSystemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Port")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrintServerSupportPrintServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Processor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RemoteEnabled")
                        .HasColumnType("bit");

                    b.Property<long?>("ServerTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("WebServerSupportWebServerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("isAppServer")
                        .HasColumnType("bit");

                    b.Property<bool>("isCloudBased")
                        .HasColumnType("bit");

                    b.Property<bool>("isDNSServer")
                        .HasColumnType("bit");

                    b.Property<bool>("isDatabaseServer")
                        .HasColumnType("bit");

                    b.Property<bool>("isFileServer")
                        .HasColumnType("bit");

                    b.Property<bool>("isHybridServer")
                        .HasColumnType("bit");

                    b.Property<bool>("isMailServer")
                        .HasColumnType("bit");

                    b.Property<bool>("isMonitoringServer")
                        .HasColumnType("bit");

                    b.Property<bool>("isPrintServer")
                        .HasColumnType("bit");

                    b.Property<bool>("isProxyServer")
                        .HasColumnType("bit");

                    b.Property<bool>("isVirtualized")
                        .HasColumnType("bit");

                    b.Property<bool>("isWebServer")
                        .HasColumnType("bit");

                    b.HasKey("ServerId");

                    b.HasIndex("DatabaseServerSupportDatabaseServerId");

                    b.HasIndex("HybridServerSupportHybridServerId");

                    b.HasIndex("MailServerSupportMailServerId");

                    b.HasIndex("OperatingSystemId");

                    b.HasIndex("PrintServerSupportPrintServerId");

                    b.HasIndex("ServerTypeId");

                    b.HasIndex("WebServerSupportWebServerId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("ServerApp.Models.ServerType", b =>
                {
                    b.Property<long>("ServerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServerTypeId");

                    b.ToTable("ServerTypes");
                });

            modelBuilder.Entity("ServerApp.Models.Supplier", b =>
                {
                    b.Property<long>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ServerApp.Models.TechnicalVendor", b =>
                {
                    b.Property<long>("TechnicalVendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CorporationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TechnicalVendorId");

                    b.HasIndex("CorporationId");

                    b.ToTable("TechnicalVendors");
                });

            modelBuilder.Entity("ServerApp.Models.TechnicalVendorSupport", b =>
                {
                    b.Property<long>("TechnicalVendorSupportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TechnicalVendorId")
                        .HasColumnType("bigint");

                    b.HasKey("TechnicalVendorSupportId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TechnicalVendorId");

                    b.ToTable("TechnicalVendorSupport");
                });

            modelBuilder.Entity("ServerApp.Models.Theme", b =>
                {
                    b.Property<long>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThemeCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThemeId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("ServerApp.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ChangePasswordDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ClientPoc")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastPassword1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastPassword2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastPassword3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastPassword4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LoggedIn")
                        .HasColumnType("bit");

                    b.Property<string>("LoginName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PasswordPolicyId")
                        .HasColumnType("bigint");

                    b.Property<long>("PhoneExtension")
                        .HasColumnType("bigint");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<long?>("Question1QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Question2QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Question3QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RankId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("RsaSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TermsAgreeed")
                        .HasColumnType("bit");

                    b.Property<long?>("ThemeId")
                        .HasColumnType("bigint");

                    b.Property<int>("WrongAttemptCount")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PasswordPolicyId");

                    b.HasIndex("Question1QuestionId");

                    b.HasIndex("Question2QuestionId");

                    b.HasIndex("Question3QuestionId");

                    b.HasIndex("RankId");

                    b.HasIndex("RegionId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ServerApp.Models.WebServer", b =>
                {
                    b.Property<long>("WebServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WebServerId");

                    b.ToTable("WebBrowsers");
                });

            modelBuilder.Entity("ServerApp.Models.Api", b =>
                {
                    b.HasOne("ServerApp.Models.Api", null)
                        .WithMany("Apis")
                        .HasForeignKey("ApiId1");

                    b.HasOne("ServerApp.Models.Environment", "Environment")
                        .WithMany("ApiDependency")
                        .HasForeignKey("EnvironmentId");

                    b.HasOne("ServerApp.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ServerApp.Models.ClientBrowserSupport", b =>
                {
                    b.HasOne("ServerApp.Models.ClientBrowser", "Browser")
                        .WithMany()
                        .HasForeignKey("BrowserClientBrowserId");

                    b.HasOne("ServerApp.Models.Product", null)
                        .WithMany("ClientBrowserSupports")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ServerApp.Models.Comment", b =>
                {
                    b.HasOne("ServerApp.Models.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId");

                    b.HasOne("ServerApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ServerApp.Models.Company", b =>
                {
                    b.HasOne("ServerApp.Models.User", "FinancialPoc")
                        .WithMany()
                        .HasForeignKey("FinancialPocUserId");

                    b.HasOne("ServerApp.Models.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");

                    b.HasOne("ServerApp.Models.User", "OperationalPoc")
                        .WithMany()
                        .HasForeignKey("OperationalPocUserId");

                    b.HasOne("ServerApp.Models.User", "ProjectPoc")
                        .WithMany()
                        .HasForeignKey("ProjectPocUserId");

                    b.HasOne("ServerApp.Models.User", "TechnicalPoc")
                        .WithMany()
                        .HasForeignKey("TechnicalPocUserId");
                });

            modelBuilder.Entity("ServerApp.Models.CompanyFinancial", b =>
                {
                    b.HasOne("ServerApp.Models.Company", null)
                        .WithMany("Financials")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("ServerApp.Models.Database", b =>
                {
                    b.HasOne("ServerApp.Models.Api", null)
                        .WithMany("Databases")
                        .HasForeignKey("ApiId");

                    b.HasOne("ServerApp.Models.User", "BackupTakenPOC")
                        .WithMany()
                        .HasForeignKey("BackupTakenPOCUserId");

                    b.HasOne("ServerApp.Models.DatabaseVendor", "DatabaseVendor")
                        .WithMany()
                        .HasForeignKey("DatabaseVendorId");

                    b.HasOne("ServerApp.Models.Environment", "Environment")
                        .WithMany("DatabaseDependency")
                        .HasForeignKey("EnvironmentId");

                    b.HasOne("ServerApp.Models.DataLogFile", "LdfInformation")
                        .WithMany()
                        .HasForeignKey("LdfInformationDataLogFileId");

                    b.HasOne("ServerApp.Models.DataLogFile", "MdfInformation")
                        .WithMany()
                        .HasForeignKey("MdfInformationDataLogFileId");

                    b.HasOne("ServerApp.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ServerApp.Models.User", "RestoredPOC")
                        .WithMany()
                        .HasForeignKey("RestoredPOCUserId");

                    b.HasOne("ServerApp.Models.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId");
                });

            modelBuilder.Entity("ServerApp.Models.DatabaseVendor", b =>
                {
                    b.HasOne("ServerApp.Models.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId");
                });

            modelBuilder.Entity("ServerApp.Models.Environment", b =>
                {
                    b.HasOne("ServerApp.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ServerApp.Models.EnvironmentType", "EnvironmentType")
                        .WithMany()
                        .HasForeignKey("EnvironmentTypeId");

                    b.HasOne("ServerApp.Models.HealthCheck", "LastHealthCheck")
                        .WithMany()
                        .HasForeignKey("LastHealthCheckHealthCheckId");

                    b.HasOne("ServerApp.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ServerApp.Models.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId");

                    b.HasOne("ServerApp.Models.WebServer", "WebServer")
                        .WithMany()
                        .HasForeignKey("WebServerId");
                });

            modelBuilder.Entity("ServerApp.Models.HybridServer", b =>
                {
                    b.HasOne("ServerApp.Models.User", "DatabaseServerBackupTakenPOC")
                        .WithMany()
                        .HasForeignKey("DatabaseServerBackupTakenPOCUserId");

                    b.HasOne("ServerApp.Models.DataLogFile", "DatabaseServerLdfInformation")
                        .WithMany()
                        .HasForeignKey("DatabaseServerLdfInformationDataLogFileId");

                    b.HasOne("ServerApp.Models.DataLogFile", "DatabaseServerMdfInformation")
                        .WithMany()
                        .HasForeignKey("DatabaseServerMdfInformationDataLogFileId");

                    b.HasOne("ServerApp.Models.User", "DatabaseServerRestoredPOC")
                        .WithMany()
                        .HasForeignKey("DatabaseServerRestoredPOCUserId");
                });

            modelBuilder.Entity("ServerApp.Models.OperatingSystemSupport", b =>
                {
                    b.HasOne("ServerApp.Models.OperatingSystem", "OperatingSystem")
                        .WithMany()
                        .HasForeignKey("OperatingSystemId");

                    b.HasOne("ServerApp.Models.Product", null)
                        .WithMany("OperatingSystemSupport")
                        .HasForeignKey("ProductId");

                    b.HasOne("ServerApp.Models.ProductPrerequisite", null)
                        .WithMany("OperatingSystemSupport")
                        .HasForeignKey("ProductPrerequisiteId");
                });

            modelBuilder.Entity("ServerApp.Models.ParentProduct", b =>
                {
                    b.HasOne("ServerApp.Models.User", "MainPoc")
                        .WithMany()
                        .HasForeignKey("MainPocUserId");
                });

            modelBuilder.Entity("ServerApp.Models.Product", b =>
                {
                    b.HasOne("ServerApp.Models.ParentProduct", "ParentProduct")
                        .WithMany()
                        .HasForeignKey("ParentProductId");

                    b.HasOne("ServerApp.Models.QualityAssurance", "QualityAssurance")
                        .WithMany()
                        .HasForeignKey("QualityAssuranceId");

                    b.HasOne("ServerApp.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId");

                    b.HasOne("ServerApp.Models.ProductType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeProductTypeId");
                });

            modelBuilder.Entity("ServerApp.Models.ProductPrerequisite", b =>
                {
                    b.HasOne("ServerApp.Models.Product", null)
                        .WithMany("Prerequisites")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ServerApp.Models.QualityAssurance", b =>
                {
                    b.HasOne("ServerApp.Models.User", "PerformedBy")
                        .WithMany()
                        .HasForeignKey("PerformedByUserId");

                    b.HasOne("ServerApp.Models.User", "VerifiedBy")
                        .WithMany()
                        .HasForeignKey("VerifiedByUserId");
                });

            modelBuilder.Entity("ServerApp.Models.Rating", b =>
                {
                    b.HasOne("ServerApp.Models.Company", "Company")
                        .WithMany("Ratings")
                        .HasForeignKey("CompanyId");

                    b.HasOne("ServerApp.Models.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId");

                    b.HasOne("ServerApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ServerApp.Models.Release", b =>
                {
                    b.HasOne("ServerApp.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ServerApp.Models.User", "DeployedBy")
                        .WithMany()
                        .HasForeignKey("DeployedByUserId");

                    b.HasOne("ServerApp.Models.User", "DevelopedBy")
                        .WithMany()
                        .HasForeignKey("DevelopedByUserId");

                    b.HasOne("ServerApp.Models.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId");

                    b.HasOne("ServerApp.Models.EnvironmentType", "EnvironmentType")
                        .WithMany()
                        .HasForeignKey("EnvironmentTypeId");

                    b.HasOne("ServerApp.Models.Product", "Product")
                        .WithMany("Releases")
                        .HasForeignKey("ProductId");

                    b.HasOne("ServerApp.Models.QualityAssurance", "QualityAssurance")
                        .WithMany()
                        .HasForeignKey("QualityAssuranceId");
                });

            modelBuilder.Entity("ServerApp.Models.Server", b =>
                {
                    b.HasOne("ServerApp.Models.DatabaseServer", "DatabaseServerSupport")
                        .WithMany()
                        .HasForeignKey("DatabaseServerSupportDatabaseServerId");

                    b.HasOne("ServerApp.Models.HybridServer", "HybridServerSupport")
                        .WithMany()
                        .HasForeignKey("HybridServerSupportHybridServerId");

                    b.HasOne("ServerApp.Models.MailServer", "MailServerSupport")
                        .WithMany()
                        .HasForeignKey("MailServerSupportMailServerId");

                    b.HasOne("ServerApp.Models.OperatingSystem", "operatingSystem")
                        .WithMany()
                        .HasForeignKey("OperatingSystemId");

                    b.HasOne("ServerApp.Models.PrintServer", "PrintServerSupport")
                        .WithMany()
                        .HasForeignKey("PrintServerSupportPrintServerId");

                    b.HasOne("ServerApp.Models.ServerType", "ServerType")
                        .WithMany()
                        .HasForeignKey("ServerTypeId");

                    b.HasOne("ServerApp.Models.WebServer", "WebServerSupport")
                        .WithMany()
                        .HasForeignKey("WebServerSupportWebServerId");
                });

            modelBuilder.Entity("ServerApp.Models.TechnicalVendor", b =>
                {
                    b.HasOne("ServerApp.Models.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId");
                });

            modelBuilder.Entity("ServerApp.Models.TechnicalVendorSupport", b =>
                {
                    b.HasOne("ServerApp.Models.Product", null)
                        .WithMany("TechnicalVendorSupports")
                        .HasForeignKey("ProductId");

                    b.HasOne("ServerApp.Models.TechnicalVendor", "TechnicalVendor")
                        .WithMany()
                        .HasForeignKey("TechnicalVendorId");
                });

            modelBuilder.Entity("ServerApp.Models.User", b =>
                {
                    b.HasOne("ServerApp.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ServerApp.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("ServerApp.Models.PasswordPolicy", "PasswordPolicy")
                        .WithMany()
                        .HasForeignKey("PasswordPolicyId");

                    b.HasOne("ServerApp.Models.Question", "Question1")
                        .WithMany()
                        .HasForeignKey("Question1QuestionId");

                    b.HasOne("ServerApp.Models.Question", "Question2")
                        .WithMany()
                        .HasForeignKey("Question2QuestionId");

                    b.HasOne("ServerApp.Models.Question", "Question3")
                        .WithMany()
                        .HasForeignKey("Question3QuestionId");

                    b.HasOne("ServerApp.Models.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId");

                    b.HasOne("ServerApp.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("ServerApp.Models.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });
#pragma warning restore 612, 618
        }
    }
}
